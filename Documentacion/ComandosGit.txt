--- LINEA DE COMANDOS LINUX - GIT BASH

- Conocer la ubicacion de donde estoy
pwd

- Limpiar la consola
clear 
ctrl + l

Listar archivos de la ubicacion en la que estoy
ls 
ls -a  => obtiene todos los archivos hasta los ocultos sin formato
ls -l  => obtiene todos los archivos sin los ocultos en formato lista
ls -a  => obtiene todos los archivos hasta los ocultos en formato lista

Ir a un disco c => en linux
cd /mnt/c
Ir a un disco d
cd /mnt/d

- Crear una carpeta
mkdir NombreCarpeta

- Crear archivo vacio
touch ArchivoVacio.txt

- Mostrar el contenido de un archivo
cat ArchivoVacio.txt

- IMPORTANTE : VER TODOS LOS COMANDO QUE E ESCRITO HASTA EL MOMENTO
history

- Si quiero repetir un comando el history retorna un numero de comando se digita !numeroDeComando
!30

- Eliminar un archivo
rm ArchivoVacio.txt


-----------------------------------------------------------------------------------------------------------

Git cuenta con 3 estados en los que es posible localizar archivos: Staged, Modified y Committed.

1. Iniciar el repositorio
git init

2. Agragar el archivo
git add ElArchivo.txt

2.1 Agregar todos los archivos
git add .

3. Enviar ultimos cambios del archivo al repositorio del sistema de control de versiones
git commit -m "Version 1"

4. Ver estado del repositorio
git status

5. Ver todos los cambios historicos hechos (Que se hizo y quien hizo los cambios)
git show

6. Ver la historia de un arhivo
git log ElArchivo.txt

7. Enviar al repositorio remoto los cambios del commit
git push

8. Traer los ultimos cambios que tengamos en el repositorio remoto
git pull

9. Eliminar o excluir un archivo del git add .
git rm --cached NombreArchivo.txt

10. Ver la configuración del git en tu equipo
git conifg
git conifg --list

10.1 Asignar el nombre y correo de usuario
git config --global user.name "James Nope"
git config --global user.email "jamesnope@gmail.com"

11. Analizar cambios en los archivos de tu proyecto con Git
git show NombreArchivo.txt

NOTA: Si por algun motivo solo dimos el comando:
git commit
Se abrira otra ventana donde deberemos digitar el mesaje del commit y al finalizar debemos oprimir las teclas:
esc + shift + z + z

11.1 Para ver la diferencia entre un cambio y otro, primero debo:
git log NombreArchivo.txt
Esto nos dara los codigos de cada commit y con esos codigos utilizaremos el siguiente comando:
git diff 496432b37cf1f2503db6833420c042e758503058 8a3768f7ceb53a9c0756ff5d5c696c80be5afb99
comando + codigo commit primera version + codigo commit version mas reciente

12. Volver en el tiempo en nuestro repositorio utilizando reset y checkout

	12.1 git reset codigo del commit
	- Tenemos dos tipos de Reset:  
	- hard : todo vuelve al estado anterior (usualmente el mas utilizado), borrando toda la información que tengamos 
	en el área de staging (y perdiendo todo para siempre)
	git reset codigoDelCommit --hard
	- soft: lo que  tengamos en staging (cambios en memoria) lo conservara y estara disponible para el proximo commit
	git reset codigoDelCommit --soft

Para ver los cambios especificos en todos los archivos modificados:
git log --stat

	12.2 git checkout codigoDelCommit
	- Volvemos a los ajustes que se realizaron en ese commit, pero quedan pendientes por confirmar por commit
	- Es decir que solo nos trae el archivo para visualizarlo y si queremos seguir en esa version del archivo
	hacemos commit para dejar el o los archivos en ese estado, de lo contrario podemos hacer checkout a la version
	que venimos trabajando y no perderemos cambios.

13. Git reset vs. Git rm
	git rm : Este comando nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versiones. 
	Esto quiere decir que si necesitamos recuperar el archivo solo debemos “viajar en el tiempo” y recuperar el 
	último commit antes de borrar el archivo en cuestión.

	git reset: Este comando nos ayuda a volver en el tiempo. Pero no como git checkout que nos deja ir, mirar, pasear
 	y volver. Con git reset volvemos al pasado sin la posibilidad de volver al futuro. Borramos la historia y la debemos 
	sobreescribir. No hay vuelta atrás. Este comando es muy peligroso y debemos emplearlo solo en caso de emergencia.

	- git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en 
	Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.
	- git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de 
	staging se borra del historial.
	- git reset HEAD: Este es el comando para sacar archivos del área de staging. No para borrarlos ni nada de eso, 
	solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión 
	y los incluyamos de nuevo en staging con git add, por supuesto.

15. Para hacer un git add . y un git commit al tiempo puedo hacer uso del siguiente comando:
	git commit -am "Commit al master del blogpost en su version mas reciente."
	- Solo funciona a archivos a los que se les haya hecho git add previamente en otro commit
	
15.1	Crear un nuevo branch (rama):
	git branch cabecera
 	Para cambiar de rama:
	git checkout cabecera

16.  Fusión de ramas con Git merge
	- Para conocer las ramas existentes y en cual estoy parado, digito:
	git branch
	- Para hacer un merge me paro en la rama a la cual quiero traer los cambios y digito:
	git merge cabecera 

19. Uso de GitHub
	- Entrar a GitHub y crear un nuevo repositorio, en el boton verde de <>Code y copiar la URL del HTTPS.
	- Para subir mi proyecto local a GitHub:
	git remote add origin https://github.com/jamesnope/hyperblog.git

	- Para confirmar damos
	git remote 		=> Deberia mostrarnos la palabra origin
	git remote -v		=> Deberia mostrarnos el detalle del origin 
	- Debemos enviar los cambios de la rama master de GitHub
	git push origin master

	- Debemos obtener los cambios de la rama master de GitHub
	git pull origin master
	* NOTA: Si nos aparece alguna advertencia al momente de fusionar la rama local con la remota debemo utilizar:
	git pull origin master --allow-unrelated-histories	

20. Cómo funcionan las llaves públicas y privadas

21. Configura tus llaves SSH en local
	- Abrimos un nuevo git bash para asegurarnos que estamos en el home de la instalacion de linux
	ssh-keygen -t rsa -b 4096 -C "jamesnope@gmail.com"
	1. Luego de poner el comando nos va a mostrar la ubicacion de donde quedara el ssh => Damos enter
	2. Nos va a pedir crear una contraseña adicional para el SSH => No es obligatoria pero si recomendada para mas seguridad
	
	- Ahora vamos a conecar nuestra llave publica con GitHub (Esto solo es para Windows y Linux)
	1. Validar que el servidor de llaves SSH este prendido
	eval $(ssh-agent -s) => El debe mostrarnos algo como (Agent pid 817) => agente proceso id y el numero
	2. Con este simbolo "~" sabemos que estamos en el home, si estamos en otra carpeta y damos cd ~ ira al home
	3. Debemos ir a la ruta donde estan los certificados generados para verificar que se encuentren en esta ruta
	cd ~/.ssh
	4. luego volvemos al home => cd ~
	5. Vamos a agregar la llave que acabamos de crear (la privada)
	ssh-add ~/.ssh/id_rsa

22. Conexión a GitHub con SSH
	1. Copiar la informaciondel certificado publico "C:\Users\JAMES\.ssh" => id_rsa.pub
	2. Entrar a GitHub y dirigirnos a settings => SSH and GPG Keys
	3. Dar Click en el boton New SSH Keys
	4. Dar un nombre a la clave y pegar en el cuerpo el contenido del certificado publico
	5. Cambiar la URL previamente configurada por HTTPS por la de SSH
	git remote set-url origin git@github.com:jamesnope/hyperblog.git
	6. Realizamos algún cambio para verificar el cambio de URL
	7. Antes de subir el cambio debemos obtener los ultimos cambiemos de GitHub
	git pull origin master
	- Cuando nos pregunte si estamos de acuerdo con la nueva autorizacion aceptamos (yes)
	8. Agregamos y submos los cambios
	git commit -am "Ajustes posteriores a la autenticación por SSH"
	git push origin master

23. Tags y versiones en Git y GitHub
	1. Para ver el detalle grafico de las ramas mediante el Bash
	git log --all --graph
	2. Pra ver el datelle grafico comprimido desde el principio en Bash
	git log --all --graph --decorate --oneline
	3. Para crear un alias con el comando anterior 
	alias comandograph="git log --all --graph --decorate --oneline"
	4. luego cada vez que escribamos "comandograph" se ejecutara el comando asociado

	5. Agregar un tag a un commit realizado previamente
	- Comando + version + resumen de la version + codigo del commit
	git tag -a v0.1 -m "Resultado de las primeras clases del curso" 7c77d6c
	6. Para conocer todos los tag creados 
	 git tag
	7. Para conocer a que tag esta asociado que commit
	 git show-ref --tags
	8. Obtenemos y subimos las asignaciones de los tags
	 git pull origin master
	 git push origin --tags 
	9. Eliminar un tag de manera local
	 git tag => conocer los tags creados
	 git tag -d nombreTag
	 git pull origin master
	 git push origin --tags 
	10. Eliminar un tag de GitHub de manera permanente
	 git push origin :refs/tags/nombreTag 

24. Manejo de ramas en GitHub
	1. Comando para ver detalle de las ramas
	git show-branch 
	2. Comando para ver detalle de las ramas con mas información
	git show-branch --all
	3. Para subir mi rama a el repositorio remoto
	git push origin cabecera
	4. Crear nuevas ramas
	git checkout master => creamos las ramas con la rama mas reciente preferiblemente
	git branch header 
	git push origin header

25. Configurar múltiples colaboradores en un repositorio de GitHub
	Para ello debo entrar a el repo en github, luego a settings y luego dar permisos
	a la persona que podra realizar cambios sobre el proyecto.

26. Flujo de trabajo profesional: Haciendo merge de ramas de desarrollo a master
	-Para obtener una rama que yo no cree:
	git pull origin footer
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
	
	- Posterior a realizar los ajustes en las ramas respectivas 
	(en este caso header y footer) y subir sus cambios a cada una de ellas,
	procedemos a realizar el merge a la rama principal:
	git merge header
	git pull origin master
	git push origin master

	git merge footer
	git pull origin master
	git push origin master

27. Flujo de trabajo profesional con Pull requests

28. Utilizando Pull Requests en GitHub
	Posterior a realizar el PR nos cambiamos a la rama master:
	git checkout origin master
	// Nos cambiamos a la rama principal
	git pull origin master

29. Creando un Fork, contribuyendo a un repositorio.
	Los forks o bifurcaciones son una característica única de GitHub en la que 
	se crea una copia exacta del estado actual de un repositorio directamente en 
	GitHub. Este repositorio podrá servir como otro origen y se podrá clonar 
	(como cualquier otro repositorio). En pocas palabras, lo podremos utilizar 
	como un nuevo repositorio git cualquiera.

	- Cómo se hace un fork remoto desde consola en GitHub
	git remote add <nombre_del_remoto> <url_del_remoto> 
	git remote upstream https://github.com/freddier/hyperblog

	- Al crear un remoto adicional, podremos hacer pull desde el nuevo origen. 
	En caso de tener permisos, podremos hacer fetch y push.
	git pull <remoto> <rama>
	git pull upstream master

	Y luego subimos los cambios que traimos a nuestro fork 
	git push origin master

30 . Haciendo deployment a un servidor.

31. Hazme un pull request.

32. Ignorar archivos en el repositorio con .gitignore
	Se recomienda no subir imagenes al repo, es una mala practica.
	https://imgur.com/

33. Readme.md es una excelente práctica
	Sitio para crear de manera mas facil el README
	https://pandao.github.io/editor.md/en.html

34. Tu sitio web público con GitHub Pages
	Aca tenemos el paso a paso oficial:
	https://pages.github.com/

	Hicimos publico el sitio 
	https://jamesnope.github.io/hyperblog/blogpost.html

35. Git Rebase: reorganizando el trabajo realizado
	- Se crea una nueva rama
	- Se realza el ajuste y se sube
	- Se hace el rebase a esta rama con master
	git rebase master
	
	- Luego pasamos a la rama master y hacemos el rebase
	git rebase LaOtraRama

36.  Git Stash: Guardar cambios en memoria y recuperarlos después
	- Realizo el cambio y si quiero cambiar de rama sin subir
	los ultimos cambios, los puedo dejar en memoria con:
	git stash
	- Puedo ver los stash con 
	git stash list 
	- Puedo cambiar de rama
	git checkout LaOtraRama
	- Verifico lo que tengo que verificar y vuelvo a la 
	rama anterior:	
	git checkout master
	- Recupero los cambios con
	git stash pop
	- Pasar un stash a una rama
	git stash branch nombre-rama
	- Subo los cambios a la nueva rama con los cambios del stash
	git commit -am "Mensaje para los cambios del stash"
	
	- Si quiero borrar un Stash
	git stash drop

